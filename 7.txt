client .py

import socket

# Define host and port to connect to the server
HOST = '127.0.0.1'
PORT = 8080

def start_client():
    """
    Connects to the server, sends messages, and receives echoes from the server.
    """
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as client_socket:
        client_socket.connect((HOST, PORT))
        print(f"[INFO] Connected to server at {HOST}:{PORT}")

        while True:
            message = input("Enter message (or 'exit' to quit): ")
            if message.lower() == "exit":
                print("[INFO] Disconnecting from server.")
                break

            # Send message to the server
            client_socket.sendall(message.encode())
            print(f"[SENT] {message}")

            # Receive echo from the server
            data = client_socket.recv(1024)
            print(f"[ECHO] {data.decode()}")

if __name__ == "__main__":
    start_client()


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

server.py

import socket
import threading

# Define host and port
HOST = '127.0.0.1'
PORT = 8080

def handle_client(client_socket, client_address):

    print(f"[INFO] Connected by {client_address}")
    try:
        while True:
            data = client_socket.recv(1024)
            if not data:
                break
            print(f"[RECEIVED] From {client_address}: {data.decode()}")

            # Echo data back to the client
            client_socket.sendall(data)
            print(f"[SENT] Echoed back to {client_address}")
    except ConnectionResetError:
        print(f"[WARNING] Connection lost with {client_address}")
    finally:
        client_socket.close()
        print(f"[INFO] Connection closed with {client_address}")

def start_server():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((HOST, PORT))
    server_socket.listen(5)
    print(f"[INFO] Server listening on {HOST}:{PORT}")

    try:
        while True:
            client_socket, client_address = server_socket.accept()
            # Start a new thread for each client connection
            client_thread = threading.Thread(target=handle_client, args=(client_socket, client_address))
            client_thread.start()
            print(f"[INFO] Active connections: {threading.active_count() - 1}")
    except KeyboardInterrupt:
        print("\n[INFO] Server shutting down...")
    finally:
        server_socket.close()

if __name__ == "__main__":
    start_server()




