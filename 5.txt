#include <bits/stdc++.h>
using namespace std;

class Process {
public:
    int id, at, bt, priority;
};

struct Ganttchart {
    int id, start, end;
};

void FCFS(Process processes[], int n, int ct[], int tat[], int wt[], vector<Ganttchart>& gantt) {
    int wait = 0;
    for (int i = 0; i < n; i++) {
        wt[i] = max(0, wait - processes[i].at);
        ct[i] = wait + processes[i].bt;
        tat[i] = ct[i] - processes[i].at;
        gantt.push_back({processes[i].id, wait, ct[i]});
        wait += processes[i].bt;
    }
}

void SJF(Process processes[], int n, int ct[], int tat[], int wt[], vector<Ganttchart>& gantt) {
    int completedTask = 0, remainingTime[n], currentTime = 0;
    for (int i = 0; i < n; i++)
        remainingTime[i] = processes[i].bt;
    while (completedTask < n) {
        int shortestTask = -1, minBurst = INT_MAX;
        for (int j = 0; j < n; j++) {
            if (processes[j].at <= currentTime && remainingTime[j] > 0 && remainingTime[j] < minBurst) {
                minBurst = remainingTime[j];
                shortestTask = j;
            }
        }
        if (shortestTask == -1) {
            currentTime++;
            continue;
        }
        remainingTime[shortestTask]--;
        gantt.push_back({processes[shortestTask].id, currentTime, ++currentTime});
        if (remainingTime[shortestTask] == 0) {
            completedTask++;
            ct[shortestTask] = currentTime;
            tat[shortestTask] = ct[shortestTask] - processes[shortestTask].at;
            wt[shortestTask] = tat[shortestTask] - processes[shortestTask].bt;
        }
    }
}

void npriority(Process processes[], int n, int ct[], int tat[], int wt[], vector<Ganttchart>& gantt)
{
    vector<bool> completed(n, false);
    int currentTime = 0, completedTask = 0;

    while (completedTask < n) {
        int highestPriorityIdx = -1, highestPriority = INT_MIN;

        for (int i = 0; i < n; i++) {
            // Select the process with the highest priority (lowest priority number)
            if (!completed[i] && processes[i].at <= currentTime && processes[i].priority > highestPriority) {
                highestPriority = processes[i].priority;
                highestPriorityIdx = i;
            }
        }

        if (highestPriorityIdx == -1) {
            currentTime++;
            continue;
        }

        gantt.push_back({processes[highestPriorityIdx].id, currentTime, currentTime += processes[highestPriorityIdx].bt});
        completed[highestPriorityIdx] = true;
        completedTask++;

        ct[highestPriorityIdx] = currentTime;
        tat[highestPriorityIdx] = ct[highestPriorityIdx] - processes[highestPriorityIdx].at;
        wt[highestPriorityIdx] = tat[highestPriorityIdx] - processes[highestPriorityIdx].bt;
    }
}

void RoundRobin(Process processes[], int n, int ts, int ct[], int tat[], int wt[], vector<Ganttchart>& gantt) {
    int remainingTime[n];
    for (int i = 0; i < n; i++)
        remainingTime[i] = processes[i].bt;

    queue<int> RQ;
    vector<bool> inQueue(n, false);
    int currentTime = 0, completedTask = 0;

    for (int i = 0; i < n; i++) {
        if (processes[i].at <= currentTime) {
            RQ.push(i);
            inQueue[i] = true;
        }
    }

    while (completedTask < n) {
        if (RQ.empty()) {
            currentTime++;
            for (int i = 0; i < n; i++) {
                if (processes[i].at <= currentTime && remainingTime[i] > 0 && !inQueue[i]) {
                    RQ.push(i);
                    inQueue[i] = true;
                }
            }   
            continue;
        }
        int curr = RQ.front();
        RQ.pop();
        inQueue[curr] = false;

        int timeSlice = min(ts, remainingTime[curr]);
        gantt.push_back({processes[curr].id, currentTime, currentTime + timeSlice});
        currentTime += timeSlice;
        remainingTime[curr] -= timeSlice;

        if (remainingTime[curr] == 0) {
            completedTask++;
            ct[curr] = currentTime;
            tat[curr] = ct[curr] - processes[curr].at;
            wt[curr] = tat[curr] - processes[curr].bt;
        } else {
            RQ.push(curr);
            inQueue[curr] = true;
        }
    }
}

void printT(Process proc[], int n, int ct[], int tat[], int wt[]) {
    cout << "ID\tAT\tBT\tCT\tTAT\tWT" << endl;
    for (int i = 0; i < n; i++) {
        cout << proc[i].id << "\t" << proc[i].at << "\t" << proc[i].bt << "\t" << ct[i] << "\t" << tat[i] << "\t" << wt[i] << endl;
    }
}

void printG(const vector<Ganttchart>& gantt) {
    cout << "\nGantt Chart: \n |";
    for (const auto& slot : gantt)
        cout  << "P" << slot.id << " | ";
    cout << "\n0";
    for (const auto& slot : gantt)
        cout << "\t" << slot.end;
    cout << "\n";
}

int main() {
    int n;
    cout << "Enter the number of processes: ";
    cin >> n;
    Process proc[n];
    for (int i = 0; i < n; i++) {
        cout << "Enter Process ID, Arrival Time, Burst Time, and Priority for process " << (i + 1) << ": ";
        cin >> proc[i].id >> proc[i].at >> proc[i].bt >> proc[i].priority;
    }

    int ct[n] = {}, tat[n] = {}, wt[n] = {};
    vector<Ganttchart> gantt;
    int choice, ts;

    while (true) {
        cout << "\nChoose Scheduling Algorithm:\n";
        cout << "1. FCFS\n2. SJF\n3. Priority\n4. Round Robin\n5. Exit\nEnter choice: ";
        cin >> choice;

        gantt.clear();
        switch (choice) {
            case 1:
                FCFS(proc, n, ct, tat, wt, gantt);
                printT(proc, n, ct, tat, wt);
                printG(gantt);
                break;
            case 2:
                SJF(proc, n, ct, tat, wt, gantt);
                printT(proc, n, ct, tat, wt);
                printG(gantt);
                break;
            case 3:
                npriority(proc, n, ct, tat, wt, gantt);
                printT(proc, n, ct, tat, wt);
                printG(gantt);
                break;
            case 4:
                cout << "Enter time quantum for Round Robin: ";
                cin >> ts;
                RoundRobin(proc, n, ts, ct, tat, wt, gantt);
                printT(proc, n, ct, tat, wt);
                printG(gantt);
                break;
            case 5:
                cout << "Exiting program.\n";
                return 0;
            default:
                cout << "Invalid choice. Please try again.\n";
                break;
        }
    }

    return 0;
}
