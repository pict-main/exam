#include <bits/stdc++.h>
using namespace std;

class Process
{
public:
    int id, at, bt, priority;
};

struct Ganttchart
{
    int id, start, end;
};

void FCFS(Process processes[], int n, int ct[], int tat[], int wt[], vector<Ganttchart> &gantt)
{
    sort(processes, processes + n, [](const Process &a, const Process &b)
        { return a.at < b.at; }); // Sort by arrival time

    int CurrentTime = 0;
    for (int i = 0; i < n; i++)
    {
        ct[i] = CurrentTime + processes[i].bt;                  // Calculate completion time
        tat[i] = ct[i] - processes[i].at;   
        wt[i] = tat[i] - processes[i].bt;
        gantt.push_back({processes[i].id, CurrentTime, ct[i]}); // Add to Gantt chart
        CurrentTime += processes[i].bt;                         // Move currentTime forward
    }
}

void SJF(Process processes[], int n, int ct[], int tat[], int wt[], vector<Ganttchart> &gantt)
{
    int CompletedTask = 0, CurrentTime = 0, RemainingTime[n];

    for (int i = 0; i < n; i++)
    {
        RemainingTime[i] = processes[i].bt;
    }

    while (CompletedTask < n)
    {
        int ShortestTask = -1, minBurst = INT_MAX;

        for (int i = 0; i < n; i++)
        {
            if (processes[i].at <= CurrentTime && RemainingTime[i] > 0 && RemainingTime[i] < minBurst)
            {
                minBurst = RemainingTime[i];
                ShortestTask = i;
            }
        }
        if (ShortestTask == -1)
        {
            CurrentTime++;
            continue;
        }

        RemainingTime[ShortestTask]--;
        gantt.push_back({processes[ShortestTask].id, CurrentTime, ++CurrentTime});

        if (RemainingTime[ShortestTask] == 0)
        {
            CompletedTask++;
            ct[ShortestTask] = CurrentTime;
            tat[ShortestTask] = ct[ShortestTask] - processes[ShortestTask].at;
            wt[ShortestTask] = tat[ShortestTask] - processes[ShortestTask].bt;
        }
    }
}

void npriority(Process processes[], int n, int ct[], int tat[], int wt[], vector<Ganttchart> &gantt)
{
    vector<bool> completed(n, false);
    int CurrentTime = 0, CompletedTask = 0;

    while (CompletedTask < n)
    {
        int HighPriorityIdx = -1, HighestPriority = INT_MAX;

        for (int i = 0; i < n; i++)
        {

            if (!completed[i] && processes[i].at <= CurrentTime && processes[i].priority < HighestPriority)
            {

                HighestPriority = processes[i].priority;
                HighPriorityIdx = i;
            }
        }
        if (HighPriorityIdx == -1)
        {
            CurrentTime++;
            continue;
        }
        completed[HighPriorityIdx] = true;
        CompletedTask++;
        gantt.push_back({processes[HighPriorityIdx].id, CurrentTime, CurrentTime + processes[HighPriorityIdx].bt});
        CurrentTime = CurrentTime + processes[HighPriorityIdx].bt;

        ct[HighPriorityIdx] = CurrentTime;
        tat[HighPriorityIdx] = ct[HighPriorityIdx] - processes[HighPriorityIdx].at;
        wt[HighPriorityIdx] = tat[HighPriorityIdx] - processes[HighPriorityIdx].bt;
    }
}

void RoundRobin(Process processes[], int n, int ts, int ct[], int tat[], int wt[], vector<Ganttchart> &gantt)
{
    int RemainingTime[n];
    int CompletedTask = 0;
    int CurrentTime = 0;

    for (int i = 0; i < n; i++)
    {
        RemainingTime[i] = processes[i].bt;
    }

    queue<int> ReadyQue;

    for (int i = 0; i < n; i++)
    {

        if (processes[i].at <= CurrentTime)
        {
            ReadyQue.push(i);
        }
    }

    while (CompletedTask < n)
    {
        if (ReadyQue.empty())
        {
            CurrentTime++;
            for (int i = 0; i < n; i++)
            {
                if (processes[i].at <= CurrentTime && RemainingTime[i]>0)
                {
                    ReadyQue.push(i);
                }
            }
            continue;
        }

        int curr=ReadyQue.front();
        ReadyQue.pop();


        int timeSlice= min(RemainingTime[curr],ts);
        gantt.push_back({processes[curr].id, CurrentTime, CurrentTime + timeSlice });
        CurrentTime +=timeSlice;
        RemainingTime[curr] -= timeSlice;

        if(RemainingTime[curr]==0){
            CompletedTask++;
            ct[curr]= CurrentTime;
            tat[curr] = ct[curr] - processes[curr].at;
            wt[curr] = tat[curr] - processes[curr].bt;
        }
        else{
            ReadyQue.push(curr);
        }
    }
}

void printT(Process proc[], int n, int ct[], int tat[], int wt[])
{
    cout << "ID\tAT\tBT\tCT\tTAT\tWT" << endl;
    for (int i = 0; i < n; i++)
    {
        cout << proc[i].id << "\t" << proc[i].at << "\t" << proc[i].bt << "\t" << ct[i] << "\t" << tat[i] << "\t" << wt[i] << endl;
    }
}

void printG(const vector<Ganttchart> &gantt)
{
    cout << "\nGantt Chart: \n |";
    for (const auto slot : gantt)
        cout << "P" << slot.id << " | ";
    cout << "\n0";
    for (const auto slot : gantt)
        cout << "\t" << slot.end;
    cout << "\n";
}


int main()
{
    int n, ts, choice;

    Process processes[]={{1,0,8,2},{2,1,4,1},{3,2,9,1},{4,3,5,2}};
    n= sizeof(processes)/sizeof(processes[0]);
        // Waiting Time array
    vector<Ganttchart> gantt;

    do
    {
        cout << "\nChoose a scheduling algorithm:\n";
        cout << "1. First-Come, First-Serve (FCFS)\n";
        cout << "2. Shortest Job First (SJF - Preemptive)\n";
        cout << "3. Priority Scheduling (Non-Preemptive)\n";
        cout << "4. Round Robin\n";
        cout << "5. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        // Clear previous results
        gantt.clear();
        int ct[n] = {0};     // Completion Time array
        int tat[n] = {0};    // Turnaround Time array
        int wt[n] = {0}; 

        switch (choice)
        {
        case 1:
            FCFS(processes, n, ct, tat, wt, gantt);
            cout << "\nFCFS Scheduling Results:\n";
            printT(processes, n, ct, tat, wt);
            printG(gantt);
            break;

        case 2:
            SJF(processes, n, ct, tat, wt, gantt);
            cout << "\nSJF Scheduling Results:\n";
            printT(processes, n, ct, tat, wt);
            printG(gantt);
            break;

        case 3:
            npriority(processes, n, ct, tat, wt, gantt);
            cout << "\nPriority Scheduling Results:\n";
            printT(processes, n, ct, tat, wt);
            printG(gantt);
            break;

        case 4:
            cout << "Enter the time quantum for Round Robin: ";
            cin >> ts;
            RoundRobin(processes, n, ts, ct, tat, wt, gantt);
            cout << "\nRound Robin Scheduling Results:\n";
            printT(processes, n, ct, tat, wt);
            printG(gantt);
            break;

        case 5:
            cout << "Exiting...\n";
            break;

        default:
            cout << "Invalid choice. Please try again.\n";
        }
    } while (choice != 5);

    return 0;
}
