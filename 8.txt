#include <bits/stdc++.h>
using namespace std;

class Process
{
public:
    int id;
    string name;

    Process()
    {
        id = 0;
        name = "";
    }
};

class Election
{
public:
    Process process[10];
    bool isCrashed[10];
    int num;

    void inputProcess()
    {
        cout << "Enter The number of Process";

        cin >> num;

        for (int i = 0; i < num; i++)
        {
            process[i].id = i + 1;
            cout << "Enter process name";
            cin >> process[i].name;

            isCrashed[i] = false;
        }
        return;
    }

    void CrashHighestProcess()
    {
        int maxId = -1;

        for (int i = 0; i < num; i++)
        {
            if (process[i].id > maxId && !isCrashed[i])
            {
                maxId = i;
            }
        }
        isCrashed[maxId] = true;
        cout << "Process with id " << maxId + 1 << " has crashed";

        return;
    }

    void bully(int initiatorId)
    {
        int maxId = initiatorId;
        bool coordinatorfound = false;

        while (!coordinatorfound)
        {
            bool electionProgress = false;

            for (int i = 0; i < num; i++)
            {
                if (process[i].id > maxId && !isCrashed[i])
                {
                    cout << "Process " << process[initiatorId].id << "has sent request to" << process[i].id;
                    maxId = process[i].id;
                    initiatorId = maxId;
                    electionProgress = true;
                }
            }
            if (!electionProgress)
            {
                coordinatorfound = true;
            }
        }
        cout << "New coordinator process is " << maxId << endl;
    }

    void RingMethod(int initiatorId)
    {
        int startPos = -1;
        for (int i = 0; i < num; i++)
        {
            if (process[i].id == initiatorId)
            {
                startPos = i;
                break;
            }
        }
        if (startPos == -1)
        {
            cout << "Initiator Process not found" << endl;
            return;
        }

        int maxId = initiatorId;
        cout << "Ring : [";

        for (int i = 0; i < num; i++)
        {
            int index = (startPos + i) % num;

            if (!isCrashed[index])
            {
                int currentId = process[index].id;
                cout << currentId << " ";

                if (currentId > maxId)
                {
                    maxId = currentId;
                }
            }
        }
        cout<<"]";
        cout<<"New coordinator is "<<maxId;
    }
};
int main() {
    Election election;
    election.inputProcess();

    election.CrashHighestProcess();

    int initiatorId;
    cout << "Enter the ID of the process which detects the crash: ";
    cin >> initiatorId;

    int choice;
    while (true) {
        cout << "\nMenu:\n1. Bully Algorithm\n2. Ring Algorithm\n3. Exit\nChoose: ";
        cin >> choice;

        if (choice == 1) {
            election.bully(initiatorId);
        } else if (choice == 2) {
            election.RingMethod(initiatorId);
        } else if (choice == 3) {
            cout << "Exiting...\n";
            break;
        } else {
            cout << "Invalid choice!\n";
        }
    }

    return 0;
}
