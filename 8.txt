#include <iostream>
using namespace std;

class Process {
public:
    int id;
    string pname;

    Process() : id(0), pname("") {}
};

class Election {
    Process processes[10];  // Array for up to 10 processes
    bool isCrashed[10];     // Array to track crashed processes
    int num;                // Number of processes

public:
    void inputProcesses() {
        cout << "Enter number of processes: ";
        cin >> num;

        for (int i = 0; i < num; i++) {
            cout << "Enter process name: ";
            cin >> processes[i].pname;
            cout << "Enter process ID: ";
            cin >> processes[i].id;
            isCrashed[i] = false;  // Initially, no process is crashed
        }
    }

    void crashHighestProcess() {
        int highestIndex = 0;
        for (int i = 1; i < num; i++) {
            if (processes[i].id > processes[highestIndex].id) {
                highestIndex = i;
            }
        }
        isCrashed[highestIndex] = true;
        cout << "Process " << processes[highestIndex].pname << " with ID " 
             << processes[highestIndex].id << " has crashed.\n";
    }

    void bully(int initiatorId) {
        int maxId = initiatorId;
        
        for (int i = 0; i < num; i++) {
            if (processes[i].id > initiatorId && !isCrashed[i]) {
                cout << "Process " << initiatorId << " sends election message to Process " << processes[i].id << endl;
                if (processes[i].id > maxId) {
                    maxId = processes[i].id;
                }
            }
        }

        cout << "New coordinator is Process " << maxId << endl;
    }

    void ring(int initiatorId) {
        cout << "Ring message: [ ";
        int startPos = -1;
        
        // Find the initiator's position
        for (int i = 0; i < num; i++) {
            if (processes[i].id == initiatorId) {
                startPos = i;
                break;
            }
        }

        // Go around the ring from the initiator position
        int maxId = initiatorId;
        for (int i = 0; i < num; i++) {
            int index = (startPos + i) % num;
            if (!isCrashed[index]) {
                cout << processes[index].id << " ";
                if (processes[index].id > maxId) {
                    maxId = processes[index].id;
                }
            }
        }
        cout << "]\n";
        
        cout << "New coordinator is Process " << maxId << endl;
    }
};

int main() {
    Election election;
    election.inputProcesses();

    election.crashHighestProcess();

    int initiatorId;
    cout << "Enter the ID of the process which detects the crash: ";
    cin >> initiatorId;

    int choice;
    while (true) {
        cout << "\nMenu:\n1. Bully Algorithm\n2. Ring Algorithm\n3. Exit\nChoose: ";
        cin >> choice;

        if (choice == 1) {
            election.bully(initiatorId);
        } else if (choice == 2) {
            election.ring(initiatorId);
        } else if (choice == 3) {
            cout << "Exiting...\n";
            break;
        } else {
            cout << "Invalid choice!\n";
        }
    }

    return 0;
}
