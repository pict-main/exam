import re as regex
import json

with open("./pass2/output/expCode.txt", "w") as file:
    pass
file.close()

kpdtab = json.load(open("./pass-1/output/kpdtab.json"))
mnt = json.load(open("./pass-1/output/mnt.json"))
pntab = json.load(open("./pass-1/output/pntab.json"))
mdt = open("./pass-1/output/mdt.txt", "r")

callFile = open("./pass2/input/call.txt", "r")

pattern = r'\s+'

expCode = open("./pass2/output/expCode.txt", "a")

def get_key(val, dict):
    for key, value in dict.items():
        if val == value:
            return key
    return None

for line in callFile:
    if line == "\n": continue

    line = line.strip()
    cmd = regex.split(pattern, line.rstrip())

    macroName = cmd[0]
    paramList = cmd[1:1:]
    npp = 0
    nkp = 0
    mdtp = ""
    kpdtp = ""

    aptab = pntab[macroName]
    aptabIndex = 1

    for key, value in mnt.items():
        if value["macroName"] == macroName:
            mdtp = value["mdtp"]
            npp = value["pp"]
            nkp = value["kp"]
            kpdtp = value["kpdtp"]
            break
    
    if mdtp == "":
        print("No such Macro exists. exiting the program......")

    for parameter in paramList:
        if(parameter[-1] == ","):
            parameter = parameter.replace(",", "")
        
        if "=" in parameter:
            equalIndex = parameter.split("=")[1]
            paraName = parameter[0:equalIndex:1]
            paraValue = parameter[equalIndex+1::]
            aptab[get_key(paraName, aptab)] = paraValue
        
        else:
            aptab[str(aptabIndex)] = parameter
            aptabIndex+=1

    if npp:
        for key, value in kpdtab.items():
            if value["macroName"] == macroName and value["defValue"] != "---":
                if aptab[get_key(value["name"], aptab)]:
                    aptab[get_key(value["name"],aptab)] = value["defValue"]

    macroStmts = []
    currentLine = 0
    for mdtLine in mdt:
        currentLine += 1
        if currentLine == mdtp:
            macroStmts.append(mdtLine)
            break

    for mdtLine in mdt:
        if "MEND" in mdtLine:
            break
        macroStmts.append(mdtLine)

    for macroStatementIndex in range(len(macroStmts)):
        macroStatement = regex.split(pattern, macroStmts[macroStatementIndex].rstrip())

        for itemIndex in range(len(macroStatement)):
            item = macroStatement[itemIndex]

            if "(" in item:
                pos = item.split(",")[1].replace(")", "")
                replaceValue = aptab[pos]
                macroStatement[itemIndex] = replaceValue

        macroStatement[0] = "+" + macroStatement[0]
        macroStmts[macroStatementIndex] = " ".join(macroStatement)
        expCode.write(macroStmts[macroStatementIndex] + "\n")

    mdt.seek(0)
    expCode.write("\n")
    aptab = ""
    mdtLine = ""

        
