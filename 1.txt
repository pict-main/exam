import json
import re as regex

with open("./Pass-1/output/ic.txt",'w') as file:
    pass
file.close()

mnemonics = {
    "stop": "(IS, 00)",
    "add": "(IS, 01)",
    "sub": "(IS, 02)",
    "mult": "(IS, 03)",
    "mover": "(IS, 04)",
    "movem": "(IS, 05)",
    "comp": "(IS, 06)",
    "bc": "(IS, 07)",
    "div": "(IS, 08)",
    "read": "(IS, 09)",
    "print": "(IS, 10)",
    "dc": "(DL, 01)",
    "ds": "(DL, 02)"
}

registers = {
    "areg": "01",
    "breg": "02",
    "creg": "03",
    "dreg": "04"
}

conditionCodes = {
    "lt": 1,
    "le": 2,
    "eq": 3,
    "gt": 4,
    "ge": 5,
    "any": 6
}

directives = {
    "start": "(AD, 01)",
    "end": "(AD, 02)",
    "origin": "(AD, 03)",
    "equ": "(AD, 04)",
    "ltorg": "(AD, 05)"
}


pattern=r'\s+'

file=open("input.asm",'r')

icFile=open("Pass-1/output/ic.txt","a")

label = ""
instruction = ""
op1 = ""
op2 = ""
op1code = ""
op2code = ""
current = 0
previous = 0
flag = False
stcnt = 1
ltcnt = 1
symbolTable = {}
literalTable = {}


for line in file:
    label = ""
    instruction = ""
    op1 = ""
    op2 = ""
    op1code = ""
    op2code = ""
    var = ""

    if line=="\n": continue
    
    line=line.strip()
    
    cmd=regex.split(pattern,line.rstrip())
    
    temp=[]
    for i in cmd:
        temp.append(i.lower())
    
    cmd = temp
    
    if len(cmd)==4:
        label=cmd[0]
        instruction=cmd[1]
        op1=cmd[2]
        op2=cmd[3]
        
    elif len(cmd)==3:
        cmdIndex=-1
        
        for command in cmd:
            if command in mnemonics:
                if command=="dc" or command=="ds":
                    var=cmd[0]
                    op1=cmd[2]
                    cmdIndex=1
                    flag=True
                    break
                else:
                    cmdIndex=cmd.index(command)
                    break
            elif command in directives:
                cmdIndex=cmd.index(command)
                break
        
        instruction = cmd[cmdIndex]
        if cmdIndex==1:
            op1=cmd[cmdIndex-1]
            op2=cmd[cmdIndex+1]
        elif flag==False:
            op1=cmd[1]
            op2=cmd[2]
            
    elif len(cmd)==2:
        cmdIndex=-1
        
        for command in cmd:
            if command in directives:
                cmdIndex=cmd.index(command)
                break
            elif command in mnemonics:
                cmdIndex=cmd.index(command)
                break
        
        instruction=cmd[cmdIndex]
        
        if cmdIndex == 0:
            op1=cmd[1]
        else:
            label=cmd[0]
            
    
    else :
        instruction = cmd[0]
        
    
    if instruction in directives:
        if instruction == "start":
            print("HIIIII")
            if len(cmd)==1:
                current=0
            else:
                current =int(cmd[1])        
            opcode= directives.get(instruction)
            op1code= f"(C,{current})"
            
            icFile.write(f"     {opcode} {op1code}\n")
        
        elif instruction == "end":
            opcode=directives.get(instruction)
            
            icFile.write(f"     {opcode}\n")
        
        elif instruction == "origin":
            opcode=directives.get(instruction)
            op1=cmd[1]
            
            if "+" in op1:
                label= op1.split("+")[0]
                offset=op1.split("+")[1]
                previous=current
                op1code=f"(S, {symbolTable.get(label)[0]})+{offset}"
                current= symbolTable.get(label)[2]+int(offset)
                
                icFile.write(f"     {opcode} {op1code}\n")
            
            if "-" in op1:
                label= op1.split("-")[0]
                offset=op1.split("-")[1]
                previous=current
                op1code=f"(S, {symbolTable.get(label)[0]})-{offset}"
                current= symbolTable.get(label)[2]-int(offset)
                
                icFile.write(f"     {opcode} {op1code}\n")
            
            else:
                previous=current
                current= symbolTable.get(label)[2]
                op1code=f"(S, {symbolTable.get(label)[0]})"
                icFile.write(f"     {opcode} {op1code}\n")
                
        elif instruction == "equ":
            op1=cmd[1]
            op2=cmd[2]
            
            symbolTable.get(op1)[2]=symbolTable.get(op2)[2]
            
        elif instruction == "ltorg":
            for literal,[index, lt, value] in literalTable.items():
                if value==-1:
                    previous=current
                    current+=1
                    literalTable[literal][2] = previous
                    opcode = f"(DL,01)"
                    op1code=f"(C,{lt})"
                    icFile.write(f"{previous} {opcode} {op1code}\n")
                
                else:
                    pass
    
    elif instruction in mnemonics:
        if instruction == "dc" or instruction=="ds":
            op2code =""
        
        opcode = mnemonics.get(instruction)
        previous = current
        current+=1
        
        if label:
            if label in symbolTable:
                symbolTable[label][2]= previous
            else:
                symbolTable[label] = [stcnt, label, previous]
                stcnt+=1
        
        if instruction == "bc":
            op1code = conditionCodes.get(op1)
        
        if op1.isdigit():
            op1code = f"(C,{op1})"
        
        elif op1 in registers:
            op1code = registers.get(op1)
        
        elif "=" in op1:
            literal = op1.split("=")[1][1]
            
            if literal in literalTable:
                op1code = f"(L, {literalTable.get(op1)[0]})"
            
            else:
                literalTable[literal]= [ltcnt, literal, -1]
                op1code = f"(L, {ltcnt})"
                ltcnt+=1
        
        else:
            if op1 in symbolTable:
                op1code = f"(S, {symbolTable.get(op1)[0]})"
            else:
                symbolTable[op1]= [stcnt, op1, -1]
                op1code = f"(S, {stcnt})"
                stcnt+=1
                
        
        if instruction =="dc" or instruction=="ds":
            symbolTable[var][2]= previous
            
        elif op2.isdigit():
            op2code = f"(C,{op2})"
        
        elif op2 in registers:
            op2code = registers.get(op2)
        
        elif "=" in op2:
            literal = op2.split("=")[1][1]
            
            if literal in literalTable:
                op2code = f"(L, {literalTable.get(literal)[0]})"
            
            else:
                literalTable[literal]= [ltcnt, literal, -1]
                op2code = f"(L, {ltcnt})"
                ltcnt+=1
        
        else:
            if op2 in symbolTable:
                op2code = f"(S, {symbolTable.get(op2)[0]})"
            elif op2 and instruction!="dc":
                symbolTable[op2]= [stcnt, op2, previous]
                op2code = f"(S, {stcnt})"
                stcnt+=1
                
        if instruction=="stop":
            icFile.write(f"     {opcode} {op1code}")
        else:
            icFile.write(f"{previous} {opcode} {op1code} {op2code}\n")
            
    else:
        print("invalid instruction",instruction)
        exit(0)

for literal, [index, lt ,value] in literalTable.items():
    if value == -1:
        literalTable.get(lt)[2] = current
        previous= current
        current +=1
        
        opcode = "(DL,01)"
        op1code= f"(C,{lt})"
        icFile.write(f"{previous} {opcode} {op1code}\n")

with open("./Pass-1/output/literal.json",'w') as json_file:
    json.dump(literalTable,json_file, indent=4)        
    
with open("./Pass-1/output/symbols.json","w") as json_file:
    json.dump(symbolTable,json_file,indent=4)
