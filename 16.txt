#include<bits/stdc++.h>
using namespace std;

void FirstFit(int nB, int bCapacity[], int nI, int iSize[], int allocation[])
{
    for (int i = 0; i < nI; i++)
    {
        for (int j = 0; j < nB; j++)
        {
            if(bCapacity[j]>=iSize[i])
            {
                allocation[i] = j+1;
                bCapacity[j] -=iSize[i];
                break;
            }
        }
    }
}

void BestFit(int nB, int bCapacity[], int nI, int iSize[], int allocation[])
{
    for (int i = 0; i < nI; i++)
    {
        int bestIdx = -1;
        for (int j = 0; j < nB; j++)
        {
            if(bCapacity[j]>=iSize[i] && (bestIdx == -1 || bCapacity[bestIdx]>bCapacity[j]))
            {
                bestIdx = j;
            }
        }
        if (bestIdx != -1)
        {
            allocation[i] = bestIdx + 1;
            bCapacity[bestIdx] -= iSize[i];
        }
    }
}

void WorstFit(int nB, int bCapacity[], int nI, int iSize[], int allocation[])
{
    for(int i = 0;i < nI; i++)
    {
            int worstIdx = -1;
            for(int j = 0;j< nB;j++)
            {
                if(bCapacity[j]>=iSize[i] && (worstIdx == -1 || bCapacity[worstIdx]<bCapacity[j]))
                {
                    worstIdx = j;
                }
            }
            if (worstIdx != -1)
            {
                allocation[i] = worstIdx + 1;
                bCapacity[worstIdx] -= iSize[i];
            }
        }
    }


void NextFit(int nB, int bCapacity[], int nI, int iSize[], int allocation[])
{
    int j = 0;
    for(int i = 0;i < nI; i++)
    {
        int start = j;
        while (true)
        {
            if (bCapacity[j]>=iSize[i])
            {
                allocation[i] = j+1;
                bCapacity[j] -= iSize[i];
                break;
            }
            j = (j+1)%nB;
            if(j==start) break;
        }
    }
}

void displayAllocation(int nI, int iSize[], int allocation[])
{
        cout << "\nItem Size\tBox No.\n";
        for (int i = 0; i < nI; i++) {
        cout << iSize[i] << "\t\t";
        if (allocation[i] != -1) {
            cout << allocation[i];
        } else {
            cout << "Not Allocated";
        }
        cout << endl;
    }
}

void resetBoxCapacities(int bCapacity[], const int originalBoxCapacity[], int nB) {
    for (int i = 0; i < nB; i++) {
        bCapacity[i] = originalBoxCapacity[i];
    }
}

int main()
{
    int nB, nI;
    cout << "Enter the number of boxes: ";
    cin >> nB;

    int bCapacity[nB], originalBoxCapacity[nB];
    cout << "Enter the capacities of the boxes: ";
    for (int i = 0; i < nB; ++i) {
        cin >> bCapacity[i];
        originalBoxCapacity[i] = bCapacity[i];
    }

    cout << "Enter the number of items: ";
    cin >> nI;
    int iSize[nI];
    int allocation[nI]; 

    cout << "Enter the sizes of the items: ";
    for (int i = 0; i < nI; ++i) {
        cin >> iSize[i];
        allocation[i] = -1; 
    }

    int choice;
    do {
        resetBoxCapacities(bCapacity, originalBoxCapacity, nB);

        cout << "\n1. First Fit\n2. Best Fit\n3. Worst Fit\n4. Next Fit\n0. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1: FirstFit(nB, bCapacity, nI, iSize, allocation); break;
            case 2: BestFit(nB, bCapacity, nI, iSize, allocation); break;
            case 3: WorstFit(nB, bCapacity, nI, iSize, allocation); break;
            case 4: NextFit(nB, bCapacity, nI, iSize, allocation); break;
            case 0: cout << "Exiting...\n"; return 0;
            default: cout << "Invalid choice. Please enter a number between 0 and 4.\n"; continue;
        }

        displayAllocation(nI, iSize, allocation);

    } while (choice != 0);

    return 0;
}
